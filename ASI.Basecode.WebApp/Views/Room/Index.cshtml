@using ASI.Basecode.Services.ServiceModels
@model IEnumerable<ASI.Basecode.Services.ServiceModels.RoomViewModel>

@{
    ViewData["Title"] = "Index";
    var amenities = ViewData["AmenitiesList"] as List<AmenityViewModel> ?? new List<AmenityViewModel>();
}

<h3>Room Management</h3>

<div class="form-row mb-3 align-items-end">
    <!-- Search Room Name Textbox (Col-2) -->
    <div class="col-md-2">
        <input type="text" id="searchRoomName" class="form-control" placeholder="Search Room Name" />
    </div>

    <!-- Type Dropdown (Col-2) -->
    <div class="col-md-2">
        <select id="typeFilter" class="form-control">
            <option value="">Select Type</option>
            <option value="MeetingRoom">Meeting Room (Has TV)</option>
            <option value="PrivateRoom">Private Room (Personal space for any work)</option>
            <option value="StudyRoom">Study Room (Designed for studying)</option>
            <option value="ConferenceRoom">Conference Room (Has TV and whiteboard)</option>
            <option value="WorkshopRoom">Workshop Room (Has whiteboard only)</option>
        </select>
    </div>

    <!-- Location Dropdown (Col-2) -->
    <div class="col-md-2">
        <select id="locationFilter" class="form-control">
            <option value="">Select Location</option>
            <option value="FocusRoom">Focus Room (Dedicated space for quiet work and concentration)</option>
            <option value="Lounge">Lounge (Casual area for relaxation and informal meetings)</option>
            <option value="InnovationLab">Innovation Lab (Room designed for brainstorming and project development)</option>
            <option value="ResourceCenter">Resource Center (Equipped with tools and materials for research and study)</option>
        </select>
    </div>

    <!-- Capacity Input (Col-1) -->
    <div class="col-md-1">
        <input type="number" id="capacityFilter" class="form-control" min="1" max="20" placeholder="Min Capacity" />
    </div>

    <!-- Amenities Multi-Select Dropdown (Col-3) -->
    <div class="col-md-3">
        <select data-placeholder="Input amenities to filter..." size="2" id="amenitiesFilter" class="form-control chosen-select" multiple name="test">
            @foreach (var amenity in amenities)
            {
                <option value="@amenity.AmenityId">@amenity.AmenityName</option>
            }
        </select>
    </div>

    <!-- Clear Filter Button (Col-2) -->
    <div class="col-md-2">
        <button id="clearFiltersButton" class="btn btn-primary btn-block">Clear Search/Filter</button>
    </div>
</div>

<p>
    <button class="btn btn-primary mb-3" onclick="openModal('@Url.Action("Create", "Room")')">Add New Rooms</button>
</p>

<div class="form-row mb-3">
    <!-- Add Toggle Button -->
    <div class="col-md-2">
        <button id="toggleViewBtn" class="btn btn-secondary">Switch to Card View</button>
    </div>
</div>

<!-- Room Views -->
<div id="roomListView" class="room-view">
    <!-- Room Table -->
    <table class="table table-striped">
        <thead>
            <tr>
                <th>@Html.DisplayNameFor(model => model.Name)</th>
                <th>@Html.DisplayNameFor(model => model.Description)</th>
                <th>@Html.DisplayNameFor(model => model.Type)</th>
                <th>@Html.DisplayNameFor(model => model.Capacity)</th>
                <th>@Html.DisplayNameFor(model => model.Location)</th>
                <th>Amenities</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var room in Model)
            {
                <tr>
                    <td>@room.Name</td>
                    <td>@room.Description</td>
                    <td>@room.Type</td>
                    <td>@room.Capacity</td>
                    <td>@room.Location</td>
                    <td>@string.Join(", ", room.RoomAmenitiesName)</td>
                    <td>
                        <button onclick="openModal('@Url.Action("View", "Room", new { roomId = room.RoomId })')" class="btn btn-info btn-sm">View</button>
                        <button onclick="openModal('@Url.Action("Edit", "Room", new { roomId = room.RoomId })')" class="btn btn-warning btn-sm">Edit</button>
                        <button onclick="openModal('@Url.Action("Delete", "Room", new { roomId = room.RoomId })')" class="btn btn-danger btn-sm">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<div id="roomCardView" class="room-view" style="display: none;">
    <div class="row">
        @foreach (var room in Model)
        {
            <div class="col-md-4">
                @Html.Partial("_RoomCard", room)
            </div>
        }
    </div>
</div>


<!-- Pagination Controls -->
@*<div class="pagination">
    @if (Model.PageNumber > 1)
    {
        <a class="btn btn-secondary" asp-action="Index" asp-route-pageNumber="@(Model.PageNumber - 1)" asp-route-pageSize="@Model.PageSize">Previous</a>
    }
    @for (int i = 1; i <= Model.TotalPages; i++)
    {
        <a class="btn @(Model.PageNumber == i ? "btn-primary" : "btn-secondary")" asp-action="Index" asp-route-pageNumber="@i" asp-route-pageSize="@Model.PageSize">@i</a>
    }
    @if (Model.PageNumber < Model.TotalPages)
    {
        <a class="btn btn-secondary" asp-action="Index" asp-route-pageNumber="@(Model.PageNumber + 1)" asp-route-pageSize="@Model.PageSize">Next</a>
    }
</div>*@

<!-- Modal -->
<div id="crudModal" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-body">
                <!-- Content will be loaded here -->
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(".chosen-select").chosen({
            no_results_text: "Oops, amenity not found!"
        });

        function openModal(url) {
            $.get(url, function (data) {
                $('#crudModal .modal-body').html(data);
                $('#crudModal').modal('show');
                $.validator.unobtrusive.parse('#crudModal .modal-body');
            });

        }

        $(document).on('submit', 'form', function (e) {
            e.preventDefault();
            var form = $(this);
            var formData = new FormData(this);

            $.ajax({
                type: form.attr('method'),
                url: form.attr('action'),
                data: formData,
                processData: false,
                contentType: false,
                success: function (response) {
                    $('#crudModal').modal('hide');
                    location.reload();
                },
                error: function (xhr) {
                    if (xhr.status === 400) {
                        $('#crudModal .modal-body').html(xhr.responseText);
                        $.validator.unobtrusive.parse('#crudModal .modal-body');
                    } else {
                        alert('An error occurred. Please try again.');
                    }
                }
            });
        });

        // Trigger performSearch when any filter changes
        $('#searchRoomName, #typeFilter, #locationFilter, #capacityFilter, #amenitiesFilter').on('change keyup', function () {
            performSearch();
        });

        // Bind clearFilters function to the Clear Search/Filter button
        $('#clearFiltersButton').on('click', function () {
            clearFilters();
        });

        function performSearch() {
            const roomName = $('#searchRoomName').val();
            const roomType = $('#typeFilter').val();
            const roomLocation = $('#locationFilter').val();
            const roomCapacity = $('#capacityFilter').val();
            const selectedAmenities = $('#amenitiesFilter').val() || [];

            const params = {
                roomName: roomName,
                type: roomType,
                location: roomLocation,
                capacity: roomCapacity,
                amenities: selectedAmenities
            };

            const url = '@Url.Action("Search", "Room")?' + $.param(params);

            $.ajax({
                url: url,
                type: 'GET',
                success: function (result) {
                    if ($('#roomListView').is(':visible')) {
                        $('#roomListView').html(result);
                    } else if ($('#roomCardView').is(':visible')) {
                        $('#roomCardView .row').html(result); // Update cards
                    }
                },
                error: function () {
                    alert('An error occurred while filtering the rooms.');
                }
            });
        }

        // $(document).ready(function () {
        //     // Toggle between list and card views without losing filter state
        //     $("#toggleViewBtn").on("click", function () {
        //         const isListView = $("#roomListView").is(":visible");
        //         if (isListView) {
        //             $("#roomListView").hide();
        //             $("#roomCardView").show();
        //             $(this).text("Switch to List View").removeClass("btn-secondary").addClass("btn-primary");
        //         } else {
        //             $("#roomCardView").hide();
        //             $("#roomListView").show();
        //             $(this).text("Switch to Card View").removeClass("btn-primary").addClass("btn-secondary");
        //         }
        //         // Reapply search filters after switching views
        //         performSearch();
        //     });
        // });


        function clearFilters() {
            // Clear all filter inputs
            $('#searchRoomName').val('');
            $('#typeFilter').val('');
            $('#locationFilter').val('');
            $('#capacityFilter').val('');
            $('#amenitiesFilter').val([]).trigger("chosen:updated");

            // Reload the table with default data
            $.ajax({
                url: '@Url.Action("Search", "Room")',
                type: 'GET',
                success: function (result) {
                    $('#roomTable').html(result);
                },
                error: function () {
                    alert('An error occurred while fetching all rooms.');
                }
            });
        }

        $(document).ready(function () {
            $("#toggleViewBtn").on("click", function () {
                const isListView = $("#roomListView").is(":visible");
                if (isListView) {
                    $("#roomListView").hide();
                    $("#roomCardView").show();
                    $(this).text("Switch to List View").removeClass("btn-secondary").addClass("btn-primary");
                } else {
                    $("#roomCardView").hide();
                    $("#roomListView").show();
                    $(this).text("Switch to Card View").removeClass("btn-primary").addClass("btn-secondary");
                }
            });
        });

        function initializeChosen() {
            $(".chosen-select").chosen({
                no_results_text: "Oops, amenity not found!",
                width: "100%" // Optional: Ensures the select box fits well within the modal
            });
        }

        // Call this function after the modal content is loaded
        $(document).on('shown.bs.modal', '#crudModal', function () {
            initializeChosen();
        });

    </script>
}