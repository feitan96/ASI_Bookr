@model List<ASI.Basecode.Services.ServiceModels.UserViewModel>

@{
    ViewData["Title"] = "User Management";
}

<h1>User Management</h1>

<div class="row mb-3">
    <div class="col-md-6">
        <input type="text" id="searchName" class="form-control" placeholder="Search by name" />
    </div>
    <div class="col-md-4">
        <select id="filterRole" class="form-control">
            <option value="">All Roles</option>
            <option value="Admin">Admin</option>
            <option value="User">User</option>
        </select>
    </div>
    <div class="col-md-2">
        <button class="btn btn-secondary w-100" onclick="clearSearch()">Clear Search</button>
    </div>
</div>

<button class="btn btn-primary mb-3" onclick="openModal('@Url.Action("Create", "UserManagement")')">Add New User</button>

<table class="table table-striped">
    <thead>
        <tr>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Email</th>
            <th>Role</th>
            <th>Phone Number</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var user in Model.Where(u => u.Role != "Superadmin"))
        {
            <tr>
                <td>@user.FirstName</td>
                <td>@user.LastName</td>
                <td>@user.Email</td>
                <td>@user.Role</td>
                <td>@user.PhoneNumber</td>
                <td>
                    <button onclick="openModal('@Url.Action("View", "UserManagement", new { Id = user.Id })')" class="btn btn-info btn-sm">View</button>
                    <button onclick="openModal('@Url.Action("Edit", "UserManagement", new { Id = user.Id })')" class="btn btn-warning btn-sm">Edit</button>
                    <button onclick="openModal('@Url.Action("Delete", "UserManagement", new { Id = user.Id })')" class="btn btn-danger btn-sm">Delete</button>

                    @if (User.IsInRole("Superadmin"))
                    {
                        <button onclick="openModal('@Url.Action("ChangeRoleModal", "UserManagement", new { id = user.Id })')"
                                class="btn btn-success btn-sm">
                            @(user.Role == "User" ? "Promote to Admin" : "Demote to User")
                        </button>
                    }

                </td>
            </tr>
        }
    </tbody>

</table>

<!-- Modal -->
<div id="crudModal" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-dialog-scrollable" role="document">
        <div class="modal-content">
            <div class="modal-body">
                <!-- Content will be loaded here -->
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/loading.js"></script>
    <script>
        // Open modal and load content
        function openModal(url) {
            showLoading('Loading content...'); // Customizable loading message
            $.get(url, function (data) {
                $('#crudModal .modal-body').html(data);
                $('#crudModal').modal('show');
                hideLoading();

                // Initialize client-side validation
                $.validator.unobtrusive.parse('#crudModal .modal-body');
            }).fail(function () {
                hideLoading();
                toastr.error('Failed to load content');
            });
        }

        // Handle form submission within modal
        $(document).on('submit', 'form', function (e) {
            e.preventDefault();
            showLoading(); // Show loading on form submission
            var form = $(this);
            var formData = new FormData(this);

            $.ajax({
                type: form.attr('method'),
                url: form.attr('action'),
                data: formData,
                processData: false,
                contentType: false,
                success: function (response) {
                    hideLoading(); // Hide loading on successful response
                    if (response.success === false) {
                        toastr.error(response.errorMessage);
                        return false;
                    } else {
                        $('#crudModal').modal('hide');
                        toastr.success(response.successMessage);

                        // Reload table content
                        $.get('@Url.Action("Index", "UserManagement")', function (data) {
                            $('table tbody').html($(data).find('table tbody').html());
                        });
                    }
                },
                error: function (xhr) {
                    hideLoading(); // Hide loading on error
                    toastr.error('An error occurred. Please try again.');
                }
            });
        });

        $(document).ready(function () {
            // Trigger search when typing in the name field
            $('#searchName').on('input', function () {
                performSearchAndFilter();
            });

            // Trigger search when selecting a role
            $('#filterRole').on('change', function () {
                performSearchAndFilter();
            });
        });

        // Function to perform search and filtering
        function performSearchAndFilter() {
            const name = $('#searchName').val();
            const role = $('#filterRole').val();

            showLoading('Searching...');
            $.get('@Url.Action("Search", "UserManagement")', { name: name, role: role }, function (data) {
                $('table tbody').html($(data).find('tbody').html());
                hideLoading();
            }).fail(function () {
                hideLoading();
                toastr.error('Failed to search or filter users.');
            });
        }

        // Clear search and filtering
        function clearSearch() {
            $('#searchName').val('');
            $('#filterRole').val('');
            performSearchAndFilter();
        }

    </script>
}
