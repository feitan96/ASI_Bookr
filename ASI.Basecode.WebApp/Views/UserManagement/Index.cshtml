@using ASI.Basecode.Services.ServiceModels
@model UserPaginationViewModel

@{
    ViewData["Title"] = "User Management";
}

<h3>User Management</h3>

<div class="d-flex">
    <div class="mr-1">
        <input type="text" id="searchName" class="form-control" placeholder="Search by name" />
    </div>
    <div class="mr-2">
        <select id="filterRole" class="form-control">
            <option value="">All Roles</option>
            <option value="Admin">Admin</option>
            <option value="User">User</option>
        </select>
    </div>
    <div class="mr-3">
        <button class="btn btn-secondary px-0" onclick="clearSearch()" style="background-color: transparent; border: none;">
            <svg style="width: 32px; fill: var(--color1);" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512"><path d="M3.9 22.9C10.5 8.9 24.5 0 40 0L472 0c15.5 0 29.5 8.9 36.1 22.9s4.6 30.5-5.2 42.5L396.4 195.6C316.2 212.1 256 283 256 368c0 27.4 6.3 53.4 17.5 76.5c-1.6-.8-3.2-1.8-4.7-2.9l-64-48c-8.1-6-12.8-15.5-12.8-25.6l0-79.1L9 65.3C-.7 53.4-2.8 36.8 3.9 22.9zM432 224a144 144 0 1 1 0 288 144 144 0 1 1 0-288zm59.3 107.3c6.2-6.2 6.2-16.4 0-22.6s-16.4-6.2-22.6 0L432 345.4l-36.7-36.7c-6.2-6.2-16.4-6.2-22.6 0s-6.2 16.4 0 22.6L409.4 368l-36.7 36.7c-6.2 6.2-6.2 16.4 0 22.6s16.4 6.2 22.6 0L432 390.6l36.7 36.7c6.2 6.2 16.4 6.2 22.6 0s6.2-16.4 0-22.6L454.6 368l36.7-36.7z" /></svg>
        </button>
    </div>
</div>

<div class="mt-sm-4">
    <button style="background-color: var(--color2); color:var(--color1); border:none;" class="btn btn-primary mt-2 mb-2" onclick="openModal('@Url.Action("Create", "UserManagement")')">
        <svg style="fill:var(--color1); width: 18px; margin-right: 10px;" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM232 344l0-64-64 0c-13.3 0-24-10.7-24-24s10.7-24 24-24l64 0 0-64c0-13.3 10.7-24 24-24s24 10.7 24 24l0 64 64 0c13.3 0 24 10.7 24 24s-10.7 24-24 24l-64 0 0 64c0 13.3-10.7 24-24 24s-24-10.7-24-24z" /></svg>
    Add New User
    </button>
</div>
<table class="table table-striped">
    <thead>
        <tr>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Email</th>
            <th>Role</th>
            <th>Phone Number</th>
            <th></th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @if (!Model.Users.Any())
        {
            <tr>
                <td colspan="7" class="text-center">
                    <div class="alert alert-light" role="alert">
                        No users found.
                    </div>
                </td>
            </tr>
        }
        else
        {
            @foreach (var user in Model.Users.Where(u => u.Role != "Superadmin"))
            {
                <tr>
                    <td>@user.FirstName</td>
                    <td>@user.LastName</td>
                    <td>@user.Email</td>
                    <td>@user.Role</td>
                    <td>@user.PhoneNumber</td>
                    <td>
                        <button onclick="openModal('@Url.Action("Edit", "UserManagement", new { Id = user.Id })')" class="btn btn-warning btn-sm pr-0">
                            <svg style="width:15px; margin-right:8px;" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M471.6 21.7c-21.9-21.9-57.3-21.9-79.2 0L362.3 51.7l97.9 97.9 30.1-30.1c21.9-21.9 21.9-57.3 0-79.2L471.6 21.7zm-299.2 220c-6.1 6.1-10.8 13.6-13.5 21.9l-29.6 88.8c-2.9 8.6-.6 18.1 5.8 24.6s15.9 8.7 24.6 5.8l88.8-29.6c8.2-2.7 15.7-7.4 21.9-13.5L437.7 172.3 339.7 74.3 172.4 241.7zM96 64C43 64 0 107 0 160L0 416c0 53 43 96 96 96l256 0c53 0 96-43 96-96l0-96c0-17.7-14.3-32-32-32s-32 14.3-32 32l0 96c0 17.7-14.3 32-32 32L96 448c-17.7 0-32-14.3-32-32l0-256c0-17.7 14.3-32 32-32l96 0c17.7 0 32-14.3 32-32s-14.3-32-32-32L96 64z" /></svg>
                        </button>
                        <button style="background-color:var(--color1); border:none;" onclick="openModal('@Url.Action("Delete", "UserManagement", new { Id = user.Id })')" class="btn btn-danger btn-sm pr-0">
                            <svg style="width:15px; margin-right:8px; fill:white;" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path d="M135.2 17.7L128 32 32 32C14.3 32 0 46.3 0 64S14.3 96 32 96l384 0c17.7 0 32-14.3 32-32s-14.3-32-32-32l-96 0-7.2-14.3C307.4 6.8 296.3 0 284.2 0L163.8 0c-12.1 0-23.2 6.8-28.6 17.7zM416 128L32 128 53.2 467c1.6 25.3 22.6 45 47.9 45l245.8 0c25.3 0 46.3-19.7 47.9-45L416 128z" /></svg>
                        </button>
                    </td>
                    <td>
                        <svg style="width:15px; margin-right:8px;" onclick="openModal('@Url.Action("View", "UserManagement", new { Id = user.Id })')" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path d="M8 256a56 56 0 1 1 112 0A56 56 0 1 1 8 256zm160 0a56 56 0 1 1 112 0 56 56 0 1 1 -112 0zm216-56a56 56 0 1 1 0 112 56 56 0 1 1 0-112z" /></svg>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

@if (Model.Users.Any())
{
    <div class="d-flex justify-content-center mt-3">
        <ul class="pagination">
            <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
                <a class="page-link" href="#" onclick="changePage(1)">First</a>
            </li>
            <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
                <a class="page-link" href="#" onclick="changePage(@(Model.CurrentPage - 1))">Previous</a>
            </li>

            @* Ellipsis Logic *@
            @{
                int totalPages = Model.TotalPages;
                int currentPage = Model.CurrentPage;
                int startPage = Math.Max(1, currentPage - 2);
                int endPage = Math.Min(totalPages, currentPage + 2);

                if (startPage > 1)
                {
                    <li class="page-item">
                        <a class="page-link" href="#" onclick="changePage(1)">1</a>
                    </li>
                    if (startPage > 2)
                    {
                        <li class="page-item disabled">
                            <span class="page-link">...</span>
                        </li>
                    }
                }

                for (int i = startPage; i <= endPage; i++)
                {
                    <li class="page-item @(i == currentPage ? "active" : "")">
                        <a class="page-link" href="#" onclick="changePage(@i)">@i</a>
                    </li>
                }

                if (endPage < totalPages)
                {
                    if (endPage < totalPages - 1)
                    {
                        <li class="page-item disabled">
                            <span class="page-link">...</span>
                        </li>
                    }
                    <li class="page-item">
                        <a class="page-link" href="#" onclick="changePage(@totalPages)">@totalPages</a>
                    </li>
                }
            }

            <li class="page-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")">
                <a class="page-link" href="#" onclick="changePage(@(Model.CurrentPage + 1))">Next</a>
            </li>
            <li class="page-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")">
                <a class="page-link" href="#" onclick="changePage(@Model.TotalPages)">Last</a>
            </li>
        </ul>
    </div>
}
else
{
    <div class="alert alert-light text-center" role="alert">
        No users found.
    </div>
    <div class="pagination justify-content-center">
        <ul class="pagination">
            @* <li class="page-item disabled">
                <span class="page-link">First</span>
            </li>
            <li class="page-item disabled">
                <span class="page-link">Previous</span>
            </li>
            <li class="page-item disabled">
                <span class="page-link">Next</span>
            </li>
            <li class="page-item disabled">
                <span class="page-link">Last</span>
            </li> *@
        </ul>
    </div>
}


<!-- Modal -->
<div id="crudModal" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-dialog-scrollable" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title"></h5>
                <button type="button" class="close modal-close-btn" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body-container">
                <div class="modal-body">
                    <!-- Content will be loaded here -->
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .btn-demote {
        background-color: var(--color1);
    }

    .btn-promote {
        background-color: var(--color2);
    }
</style>

@section Scripts {
    <script src="~/js/loading.js"></script>
    <script>
        // Open modal and load content
        function openModal(url, title) {
            showLoading('Loading content...'); // Customizable loading message
            $.get(url, function (data) {
                $('#crudModal .modal-body').html(data);

                if (url.includes('Delete')) {
                    title = 'Delete User';
                }
                else if (url.includes('Edit')) {
                    title = 'Edit User';
                }
                else if (url.includes('View')) {
                    title = 'User Details';
                }
                else if (url.includes('Create')) {
                    title = 'Add User';
                }
                else if (url.includes('ChangeRoleModal')) {
                    title = 'Change Role';
                }
                else {
                    title = 'User Management';
                }
                $('#crudModal .modal-title').text(title);

                $('#crudModal').modal('show');
                hideLoading();

                // Initialize client-side validation
                $.validator.unobtrusive.parse('#crudModal .modal-body');
            }).fail(function () {
                hideLoading();
                toastr.error('Failed to load content');
            });
        }

        // Handle form submission within modal
        $(document).on('submit', 'form', function (e) {
            e.preventDefault();
            showLoading(); // Show loading on form submission
            var form = $(this);
            var formData = new FormData(this);

            $.ajax({
                type: form.attr('method'),
                url: form.attr('action'),
                data: formData,
                processData: false,
                contentType: false,
                success: function (response) {
                    hideLoading(); // Hide loading on successful response
                    if (response.success === false) {
                        toastr.error(response.errorMessage);
                        return false;
                    } else {
                        $('#crudModal').modal('hide');
                        toastr.success(response.successMessage);

                        // Reload table content
                        $.get('@Url.Action("Index", "UserManagement")', function (data) {
                            $('table tbody').html($(data).find('table tbody').html());
                        });
                    }
                },
                error: function (xhr) {
                    hideLoading(); // Hide loading on error
                    toastr.error('An error occurred. Please try again.');
                }
            });
        });

        $(document).ready(function () {
            // Trigger search when typing in the name field
            $('#searchName').on('input', function () {
                performSearchAndFilter();
            });

            // Trigger search when selecting a role
            $('#filterRole').on('change', function () {
                performSearchAndFilter();
            });
        });

        function changePage(page) {
            const name = $('#searchName').val();
            const role = $('#filterRole').val();

            showLoading('Loading page...');
            $.ajax({
                url: '@Url.Action("Search", "UserManagement")',
                type: 'GET',
                data: {
                    name: name,
                    role: role,
                    page: page
                },
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                },
                success: function (data) {
                    $('table tbody').html($(data).find('tbody').html());
                    $('.pagination').replaceWith($(data).find('.pagination'));
                    hideLoading();
                },
                error: function () {
                    hideLoading();
                    toastr.error('Failed to load page.');
                }
            });
        }

        function performSearchAndFilter() {
            const name = $('#searchName').val();
            const role = $('#filterRole').val();

            showLoading('Searching...');
            $.get('@Url.Action("Search", "UserManagement")', {
                name: name,
                role: role,
                page: 1
            }, function (data) {
                $('table tbody').html($(data).find('tbody').html());
                $('.pagination').replaceWith($(data).find('.pagination'));
                hideLoading();
            }).fail(function () {
                hideLoading();
                toastr.error('Failed to search or filter users.');
            });
        }

        // Clear search and filtering
        function clearSearch() {
            $('#searchName').val('');
            $('#filterRole').val('');
            performSearchAndFilter();
        }

        function closeModal() {
            $('#crudModal').modal('hide'); // Using string interpolation
        }
        
    function restrictPhoneNumberInput(event) {
        const phoneNumberInput = event.target;
        let value = phoneNumberInput.value;

        // Ensure the value starts with +63 
        if (!value.startsWith("+63 ")) {
            value = "+63 ";
        }

        // Limit the total length to 14 characters: +63  + 10 digits
        if (value.length > 14) {
            value = value.substring(0, 14);
        }

        // Update the input value
        phoneNumberInput.value = value;
    }
    </script>
}
